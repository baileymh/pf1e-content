{
  "_id": "1G3PcOFZhjf6HlnL",
  "name": "- Change Formulas",
  "content": "<blockquote>\n<p>Below are a sample of formulas used in ability, item, and feature Changes that may prove useful for adding or updating for functionality. While these are not comprehensive, they aim is to aid GM's and Players to correct or add missing changes.&nbsp; Thanks to @Eitan and various others on the Discord for their useful examples.</p>\n<p>&nbsp;</p>\n<p>Additionally, if you add Changes to any of the entities created by this module or the pf1 sys, please consider using Data Toolbox's Contribute button, to upload them to be added/merged in future releases.&nbsp;</p>\n</blockquote>\n<p>&nbsp;</p>\n<h1>'Change' Tips</h1>\n<ul>\n<li>Most values are listed via hovering over the appropriate value in the character sheet</li>\n<li>Ability modifier: @abilities.con.mod</li>\n<li>Ability modifier without temporary buffs (i.e. Rage): @abilities.con.baseMod</li>\n<li>Changes can be set to Add to the value (+) or Replace (=)</li>\n<li>Scripts using js can also be used for changes, for more complicated things.</li>\n<li>Not everything available in Pathfinder can currently be accomplished through changes</li>\n</ul>\n<p>&nbsp;</p>\n<h1>Math functions</h1>\n<h2>Basic</h2>\n<p><strong>Round Up</strong></p>\n<p><code>ceil()</code></p>\n<p><strong>Example:</strong> <code>ceil(5 / 2)</code></p>\n<p><strong>Result:</strong> 3</p>\n<hr />\n<p><strong>Round Down</strong></p>\n<p><code>floor()</code></p>\n<p><strong><code></code>Example:</strong> <code>floor(@attributes.bab.total / 6)</code></p>\n<p><strong>Result:</strong> Divide by 6 and round down</p>\n<hr />\n<p><strong>Minimum</strong></p>\n<p><code>min(x, y)</code></p>\n<p><strong>Example:</strong> <code>min(5,@cl)d6</code></p>\n<p><strong>Result:</strong> Scales from caster level, up to a max value of 5d6</p>\n<hr />\n<h3><strong>Maximum</strong></h3>\n<p style=\"font-size: 14px;\"><code>max(x, y)&nbsp;</code></p>\n<p style=\"font-size: 14px;\"><strong>Example:</strong>&nbsp;<code>max(4, (@classes.class.level))</code></p>\n<p style=\"font-size: 14px;\"><strong>Result:</strong>&nbsp;Uses 4, unless class level is greater. Effectively creates a lower bounds until class level &gt; 4, then uses class levels.&nbsp;</p>\n<hr />\n<h3><strong>Conditional</strong></h3>\n<p><code>(X &gt; Y ? A : B)&nbsp;</code></p>\n<p><strong>Example:</strong>&nbsp;<code>@attributes.hd.total &gt; 9 ? 4 : 2</code></p>\n<p><strong>Result:</strong> If HD is greater than 9, output is 4, if it is not then 2</p>\n<hr />\n<h3><strong>Absolute value</strong></h3>\n<p><code>abs()&nbsp;</code></p>\n<p><strong>Example:</strong>&nbsp;<code>abs(2 - 4)</code></p>\n<p><strong>Result:</strong>&nbsp;Outputs 2 (rather than -2)</p>\n<hr />\n<p>Foundry uses JS Math. For more math functions, go <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">here</a>. Reading how JS handles math might make things easier to understand.&nbsp;&nbsp;</p>\n<p>&nbsp;</p>\n<h2>Combined examples</h2>\n<p><code></code><strong style=\"font-size: 1.125em;\">Increase by 1 for every 4 BAB</strong></p>\n<p><code>max(1, floor(@attributes.bab.total / 4)))</code></p>\n<p><strong>Result:</strong> BAB = 3: 1; BAB = 6: 1; BAB = 14: 3</p>\n<p>&nbsp;</p>\n<p><strong>Half Class level, minimum 1</strong></p>\n<p><code>max(1, floor(@classes.boo.level / 2))</code></p>\n<p>&nbsp;</p>\n<h1>Specific Use Examples</h1>\n<p>&nbsp;</p>\n<h2>Cavalier Challenge Uses</h2>\n<p><em>Once per day, plus one for every three levels beyond (1, 4, 7, 10, ...)</em></p>\n<ul>\n<li><strong>Limited Uses:</strong> <code>1 + floor((@classes.cavalier.level - 1) / 3)</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Channel Positive Energy</h2>\n<p><em>Heals 1d6 + 1d6 for every 2 levels beyond 1st (3, 5, 7, ...)</em></p>\n<ul>\n<li><strong>Healing:</strong><code> ceil(@classes.cleric.level / 2))d6</code></li>\n</ul>\n<p><em>DC for the save is 10 + 1/2 cleric level + Cha mod</em></p>\n<ul>\n<li><strong>Save DC: </strong><code>10 + floor(@classes.cleric.level / 2) + @abilities.cha.mod</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Cure Light Wounds</h2>\n<p><em>Heals 1d8 + cl (max of 5)</em></p>\n<ul>\n<li><strong>Healing:</strong><code> 1d8 + min(5, @cl)</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Fireball</h2>\n<p><em>Deals 1d6 per caster level, max 10d6</em></p>\n<ul>\n<li><strong>Damage:</strong><code> (min(10, @cl))d6</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Fleet</h2>\n<p><em>Increase movement speed by 5, while wearing light (1) or no armor (0) and not encumbered. (@armor.type - medium armor = 2, heavy = 3)</em></p>\n<ul>\n<li><strong>Change (+):</strong><code>&nbsp;(@armor.type &lt; 2 &amp;&amp; @attributes.encumbrance.level &lt; 1) ? 5 : 0</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Kinetic Blasts</h2>\n<p><em>These are some of the more complex formula I've seen, that also include the use of resources. </em></p>\n<h3><strong>Elemental Overflow</strong> (added to attack bonus of blasts)</h3>\n<p><em>See @Compendium[pf1.class-abilities.NOhmhKgboJ9qdGvg]{Elemental Overflow} for description</em></p>\n<ul>\n<li><strong>Attack</strong><strong>:</strong> &nbsp;<code>min(@resources.burn.value, floor(@classes.kineticist.level / 3))</code></li>\n</ul>\n<p><code></code></p>\n<p><code></code></p>\n<h3><strong>Energy Blast</strong></h3>\n<p><em>Deals 1d6 plus 1d6 every 2 levels beyond 1st (1, 3, 5, ...) + damage from Elemental Overflow</em></p>\n<ul>\n<li><strong>Attack:</strong> <code>min(@resources.burn.value, floor(@classes.kineticist.level / 3))</code></li>\n<li><strong>Damage:</strong> <code>(ceil(@classes.kineticist.level/2))d6 </code><code>+ min(@resources.burn.value, floor(@classes.kineticist.level/3)) * 2 * @critMult</code></li>\n</ul>\n<p><code></code></p>\n<p><code></code></p>\n<h3><strong>Physical Blast</strong></h3>\n<p><em>Deals 1d6+1, plus 1d6+1 every 2 levels beyond 1st (1, 3, 5, ...) + damage from Elemental Overflow</em></p>\n<ul>\n<li><code></code><strong>Attack:</strong>&nbsp;<code>min(@resources.burn.value, floor(@classes.kineticist.level / 3))</code></li>\n<li><strong>Damage: </strong><code>(ceil(@classes.kineticist.level/2))d6 + ceil(@classes.kineticist.level/2) + min(@resources.burn.value, floor(@classes.kineticist.level/3)) * 2 * @critMult</code></li>\n</ul>\n<p>&nbsp;</p>\n<h3><strong>Energy Composite Blasts</strong></h3>\n<ul>\n<li><strong>Attack:</strong> &nbsp;<code>min(@resources.burn.value, floor(@classes.kineticist.level / 3))</code></li>\n<li><strong>Damage: </strong><code>(2 * ceil(@classes.kineticist.level/2))d6 + floor(@abilities.con.mod/2) + min(@resources.burn.value, floor(@classes.kineticist.level/3)) * 2 * @critMult</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Power Attack</h2>\n<p><em>Gives -1 Atk / +2 Dmg, increasing by -1/+2 when BAB = 4, and every 4 points after</em></p>\n<ul>\n<li><strong>Attack:&nbsp;</strong><code>-floor((@attributes.bab.total+4)/4)</code></li>\n<li><strong>Damage:</strong><code> floor((@attributes.bab.total+4)/4)*2</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Sneak Attack</h2>\n<p><em>Rogue sneak attack (Levels 1, 3, 5, ...)</em></p>\n<ul>\n<li><strong>Damage:</strong> <code>ceil(@classes.rogue.level / 2)d6</code></li>\n</ul>\n<p>&nbsp;</p>\n<p><em>Slayer sneak attack (Levels 3, 6, 9, ...)</em></p>\n<ul>\n<li><strong>Damage:</strong> <code>floor(@classes.slayer.level / 3)d6</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Skill Focus (Perception)<span style=\"font-size: 14px;\"><em>&nbsp;</em></span></h2>\n<p><em>Gives +3 base, +6 at 10 ranks+&nbsp;</em></p>\n<ul>\n<li><strong>Change:</strong> @skills.per.rank &gt; 9 ? 6 : 3</li>\n</ul>\n<p><code></code></p>\n<p><code></code></p>\n<p><code></code></p>",
  "img": "icons/sundries/documents/blueprint-magical.webp"
}
